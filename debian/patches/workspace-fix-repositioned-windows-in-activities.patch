From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Fri, 19 Jan 2018 08:00:10 -0600
Subject: workspace: fix repositioned windows in activities

workspace: Recompute bounding box on window 'position-changed'

We need to update the clone position if window size changed
also, rename meta window 'size-changed' callback accordingly.

https://bugzilla.gnome.org/show_bug.cgi?id=792681

workspaceThumbnail: Sync clone position changes with actor

We need to update the clone position if window actor (not the meta window)
position changed.

https://bugzilla.gnome.org/show_bug.cgi?id=792681

Bug-GNOME: https://bugzilla.gnome.org/show_bug.cgi?id=776588
Bug-Ubuntu: https://bugs.launchpad.net/gnome-shell/+bug/1653153
Forwarded: yes, https://gitlab.gnome.org/GNOME/gnome-shell/merge_requests/8
---
 js/ui/workspace.js          | 28 +++++++++++++++-------------
 js/ui/workspaceThumbnail.js |  9 ++++-----
 2 files changed, 19 insertions(+), 18 deletions(-)

diff --git a/js/ui/workspace.js b/js/ui/workspace.js
index 8836537..f06b78e 100644
--- a/js/ui/workspace.js
+++ b/js/ui/workspace.js
@@ -137,8 +137,10 @@ var WindowClone = new Lang.Class({
         this._dragSlot = [0, 0, 0, 0];
         this._stackAbove = null;
 
-        this._windowClone._updateId = this.metaWindow.connect('size-changed',
-            this._onRealWindowSizeChanged.bind(this));
+        this._windowClone._sizeChangedId = this.metaWindow.connect('size-changed',
+            this._onMetaWindowSizeChanged.bind(this));
+        this._windowClone._posChangedId = this.metaWindow.connect('position-changed',
+            this._computeBoundingBox.bind(this));
         this._windowClone._destroyId = this.realWindow.connect('destroy',
             this.destroy.bind(this));
 
@@ -200,8 +202,7 @@ var WindowClone = new Lang.Class({
 
     addAttachedDialog(win) {
         this._doAddAttachedDialog(win, win.get_compositor_private());
-        this._computeBoundingBox();
-        this.emit('size-changed');
+        this._onMetaWindowSizeChanged();
     },
 
     hasAttachedDialogs() {
@@ -210,15 +211,14 @@ var WindowClone = new Lang.Class({
 
     _doAddAttachedDialog(metaWin, realWin) {
         let clone = new Clutter.Clone({ source: realWin });
-        clone._updateId = metaWin.connect('size-changed', () => {
-            this._computeBoundingBox();
-            this.emit('size-changed');
-        });
+        clone._sizeChangedId = metaWin.connect('size-changed',
+            this._onMetaWindowSizeChanged.bind(this));
+        clone._posChangedId = metaWin.connect('position-changed',
+            this._onMetaWindowSizeChanged.bind(this));
         clone._destroyId = realWin.connect('destroy', () => {
             clone.destroy();
 
-            this._computeBoundingBox();
-            this.emit('size-changed');
+            this._onMetaWindowSizeChanged.bind(this);
         });
         this.actor.add_child(clone);
     },
@@ -308,7 +308,8 @@ var WindowClone = new Lang.Class({
 
         // First destroy the clone and then destroy everything
         // This will ensure that we never see it in the _disconnectSignals loop
-        this.metaWindow.disconnect(this._windowClone._updateId);
+        this.metaWindow.disconnect(this._windowClone._sizeChangedId);
+        this.metaWindow.disconnect(this._windowClone._posChangedId);
         this.realWindow.disconnect(this._windowClone._destroyId);
         this._windowClone.destroy();
 
@@ -323,12 +324,13 @@ var WindowClone = new Lang.Class({
             else
                 realWindow = child.source;
 
-            realWindow.meta_window.disconnect(child._updateId);
+            realWindow.meta_window.disconnect(child._sizeChangedId);
+            realWindow.meta_window.disconnect(child._posChangedId);
             realWindow.disconnect(child._destroyId);
         });
     },
 
-    _onRealWindowSizeChanged() {
+    _onMetaWindowSizeChanged() {
         this._computeBoundingBox();
         this.emit('size-changed');
     },
diff --git a/js/ui/workspaceThumbnail.js b/js/ui/workspaceThumbnail.js
index 0c72e74..4db8c19 100644
--- a/js/ui/workspaceThumbnail.js
+++ b/js/ui/workspaceThumbnail.js
@@ -68,7 +68,7 @@ var WindowClone = new Lang.Class({
         this.realWindow = realWindow;
         this.metaWindow = realWindow.meta_window;
 
-        this.clone._updateId = this.metaWindow.connect('position-changed',
+        this.clone._updateId = this.realWindow.connect('notify::position',
                                                        this._onPositionChanged.bind(this));
         this.clone._destroyId = this.realWindow.connect('destroy', this.destroy.bind(this));
         this._onPositionChanged();
@@ -141,7 +141,7 @@ var WindowClone = new Lang.Class({
 
         // First destroy the clone and then destroy everything
         // This will ensure that we never see it in the _disconnectSignals loop
-        this.metaWindow.disconnect(this.clone._updateId);
+        this.realWindow.disconnect(this.clone._updateId);
         this.realWindow.disconnect(this.clone._destroyId);
         this.clone.destroy();
 
@@ -156,7 +156,7 @@ var WindowClone = new Lang.Class({
         let clone = new Clutter.Clone({ source: realDialog });
         this._updateDialogPosition(realDialog, clone);
 
-        clone._updateId = metaDialog.connect('position-changed', dialog => {
+        clone._updateId = metaDialog.connect('notify::position', dialog => {
             this._updateDialogPosition(dialog, clone);
         });
         clone._destroyId = realDialog.connect('destroy', () => {
@@ -174,7 +174,6 @@ var WindowClone = new Lang.Class({
     },
 
     _onPositionChanged() {
-        let rect = this.metaWindow.get_frame_rect();
         this.actor.set_position(this.realWindow.x, this.realWindow.y);
     },
 
@@ -182,7 +181,7 @@ var WindowClone = new Lang.Class({
         this.actor.get_children().forEach(child => {
             let realWindow = child.source;
 
-            realWindow.meta_window.disconnect(child._updateId);
+            realWindow.disconnect(child._updateId);
             realWindow.disconnect(child._destroyId);
         });
     },
