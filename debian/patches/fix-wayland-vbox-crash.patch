Description: Fixing wayland bad behaviour with virtualbox
Author:  Marco Trevisan (TreviÃ±o)
Origin: https://bugzilla.gnome.org/show_bug.cgi?id=788908
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1724810
Last-Update: 2017-10-31

--- gnome-shell-3.26.1.orig/src/st/st-entry.c
+++ gnome-shell-3.26.1/src/st/st-entry.c
@@ -875,7 +875,8 @@ st_entry_paint (ClutterActor *actor)
             cogl_handle_unref (priv->text_shadow_material);
 
           material = _st_create_shadow_pipeline_from_actor (shadow_spec,
-                                                            priv->entry);
+                                                            priv->entry,
+                                                            ST_SHADOW_ANY_MODE);
 
           priv->shadow_width = width;
           priv->shadow_height = height;
--- gnome-shell-3.26.1.orig/src/st/st-icon.c
+++ gnome-shell-3.26.1/src/st/st-icon.c
@@ -56,12 +56,15 @@ struct _StIconPrivate
 
   CoglPipeline *shadow_pipeline;
   StShadow     *shadow_spec;
+  ClutterSize   shadow_size;
 };
 
 G_DEFINE_TYPE_WITH_PRIVATE (StIcon, st_icon, ST_TYPE_WIDGET)
 
 static void st_icon_update               (StIcon *icon);
 static gboolean st_icon_update_icon_size (StIcon *icon);
+static void st_icon_update_shadow_pipeline (StIcon *icon, StPrivateShadowCreateFlags flags);
+static void st_icon_clear_shadow_pipeline (StIcon *icon);
 
 #define DEFAULT_ICON_SIZE 48
 
@@ -156,22 +159,34 @@ st_icon_dispose (GObject *gobject)
 }
 
 static void
+st_icon_allocate (ClutterActor           *actor,
+                  const ClutterActorBox  *box,
+                  ClutterAllocationFlags  flags)
+{
+  StIcon *icon = ST_ICON (actor);
+
+  CLUTTER_ACTOR_CLASS (st_icon_parent_class)->allocate (actor, box, flags);
+
+  st_icon_update_shadow_pipeline (icon, ST_SHADOW_TEXTURE_MODE);
+}
+
+static void
 st_icon_paint (ClutterActor *actor)
 {
-  StIconPrivate *priv = ST_ICON (actor)->priv;
+  StIcon *icon = ST_ICON (actor);
+  StIconPrivate *priv = icon->priv;
 
   st_widget_paint_background (ST_WIDGET (actor));
 
   if (priv->icon_texture)
     {
+      st_icon_update_shadow_pipeline (icon, ST_SHADOW_ANY_MODE);
+
       if (priv->shadow_pipeline)
         {
           ClutterActorBox allocation;
-          float width, height;
 
           clutter_actor_get_allocation_box (priv->icon_texture, &allocation);
-          clutter_actor_box_get_size (&allocation, &width, &height);
-
           _st_paint_shadow_with_opacity (priv->shadow_spec,
                                          priv->shadow_pipeline,
                                          &allocation,
@@ -189,7 +204,7 @@ st_icon_style_changed (StWidget *widget)
   StThemeNode *theme_node = st_widget_get_theme_node (widget);
   StIconPrivate *priv = self->priv;
 
-  g_clear_pointer (&priv->shadow_pipeline, cogl_object_unref);
+  st_icon_clear_shadow_pipeline (self);
   g_clear_pointer (&priv->shadow_spec, st_shadow_unref);
 
   priv->shadow_spec = st_theme_node_get_shadow (theme_node, "icon-shadow");
@@ -219,6 +234,7 @@ st_icon_class_init (StIconClass *klass)
   object_class->set_property = st_icon_set_property;
   object_class->dispose = st_icon_dispose;
 
+  actor_class->allocate = st_icon_allocate;
   actor_class->paint = st_icon_paint;
 
   widget_class->style_changed = st_icon_style_changed;
@@ -268,21 +284,51 @@ st_icon_init (StIcon *self)
 }
 
 static void
-st_icon_update_shadow_pipeline (StIcon *icon)
+st_icon_clear_shadow_pipeline (StIcon *icon)
 {
   StIconPrivate *priv = icon->priv;
 
   g_clear_pointer (&priv->shadow_pipeline, cogl_object_unref);
+  clutter_size_init (&priv->shadow_size, 0, 0);
+}
 
-  if (priv->shadow_spec)
-   priv->shadow_pipeline = _st_create_shadow_pipeline_from_actor (priv->shadow_spec, priv->icon_texture);
+static void
+st_icon_update_shadow_pipeline (StIcon *icon,
+                                StPrivateShadowCreateFlags shadow_flags)
+{
+  StIconPrivate *priv = icon->priv;
+
+  if (priv->icon_texture && priv->shadow_spec)
+    {
+      ClutterActorBox box;
+      float width, height;
+
+      clutter_actor_get_allocation_box (CLUTTER_ACTOR (icon), &box);
+      clutter_actor_box_get_size (&box, &width, &height);
+
+      if (priv->shadow_pipeline == NULL ||
+          priv->shadow_size.width != width ||
+          priv->shadow_size.height != height)
+        {
+          st_icon_clear_shadow_pipeline (icon);
+
+          priv->shadow_pipeline =
+            _st_create_shadow_pipeline_from_actor (priv->shadow_spec,
+                                                   priv->icon_texture,
+                                                   shadow_flags);
+
+          if (priv->shadow_pipeline)
+            clutter_size_init (&priv->shadow_size, width, height);
+        }
+    }
 }
 
 static void
 on_pixbuf_changed (ClutterTexture *texture,
                    StIcon         *icon)
 {
-  st_icon_update_shadow_pipeline (icon);
+  st_icon_clear_shadow_pipeline (icon);
+  clutter_actor_queue_redraw (CLUTTER_ACTOR (icon));
 }
 
 static void
@@ -307,7 +353,7 @@ st_icon_finish_update (StIcon *icon)
       /* Remove the temporary ref we added */
       g_object_unref (priv->icon_texture);
 
-      st_icon_update_shadow_pipeline (icon);
+      st_icon_clear_shadow_pipeline (icon);
 
       /* "pixbuf-change" is actually a misnomer for "texture-changed" */
       g_signal_connect_object (priv->icon_texture, "pixbuf-change",
--- gnome-shell-3.26.1.orig/src/st/st-label.c
+++ gnome-shell-3.26.1/src/st/st-label.c
@@ -210,7 +210,10 @@ st_label_paint (ClutterActor *actor)
 
           priv->shadow_width = width;
           priv->shadow_height = height;
-          priv->text_shadow_pipeline = _st_create_shadow_pipeline_from_actor (shadow_spec, priv->label);
+          priv->text_shadow_pipeline =
+            _st_create_shadow_pipeline_from_actor (shadow_spec,
+                                                   priv->label,
+                                                   ST_SHADOW_ANY_MODE);
         }
 
       if (priv->text_shadow_pipeline != NULL)
--- gnome-shell-3.26.1.orig/src/st/st-private.c
+++ gnome-shell-3.26.1/src/st/st-private.c
@@ -411,30 +411,41 @@ _st_create_shadow_pipeline (StShadow
 
 CoglPipeline *
 _st_create_shadow_pipeline_from_actor (StShadow     *shadow_spec,
-                                       ClutterActor *actor)
+                                       ClutterActor *actor,
+                                       StPrivateShadowCreateFlags flags)
 {
   CoglPipeline *shadow_pipeline = NULL;
   ClutterActorBox box;
   float width, height;
 
+  g_return_val_if_fail (clutter_actor_has_allocation (actor), NULL);
+
   clutter_actor_get_allocation_box (actor, &box);
   clutter_actor_box_get_size (&box, &width, &height);
 
   if (width == 0 || height == 0)
     return NULL;
 
-  if (CLUTTER_IS_TEXTURE (actor))
+  if (CLUTTER_IS_TEXTURE (actor) && (flags & ST_SHADOW_TEXTURE_MODE))
     {
       CoglTexture *texture;
 
       texture = clutter_texture_get_cogl_texture (CLUTTER_TEXTURE (actor));
-      if (texture &&
-          cogl_texture_get_width (texture) == width &&
-          cogl_texture_get_height (texture) == height)
-        shadow_pipeline = _st_create_shadow_pipeline (shadow_spec, texture);
+
+      if (texture)
+        {
+          guint texture_width = cogl_texture_get_width (texture);
+          guint texture_height = cogl_texture_get_height (texture);
+
+          if (texture_width == 0 || texture_height == 0)
+            return NULL;
+
+          if (texture_width == width && texture_height == height)
+            shadow_pipeline = _st_create_shadow_pipeline (shadow_spec, texture);
+        }
     }
 
-  if (shadow_pipeline == NULL)
+  if (shadow_pipeline == NULL && (flags & ST_SHADOW_OFFSCREEN_MODE))
     {
       CoglTexture *buffer;
       CoglOffscreen *offscreen;
--- gnome-shell-3.26.1.orig/src/st/st-private.h
+++ gnome-shell-3.26.1/src/st/st-private.h
@@ -43,6 +43,13 @@ G_BEGIN_DECLS
 
 G_END_DECLS
 
+typedef enum _StPrivateShadowCreateFlags
+{
+  ST_SHADOW_TEXTURE_MODE   = (1 << 0),
+  ST_SHADOW_OFFSCREEN_MODE = (1 << 1),
+  ST_SHADOW_ANY_MODE       = ST_SHADOW_OFFSCREEN_MODE | ST_SHADOW_TEXTURE_MODE
+} StPrivateShadowCreateFlags;
+
 ClutterActor *_st_widget_get_dnd_clone (StWidget *widget);
 
 void _st_actor_get_preferred_width  (ClutterActor *actor,
@@ -65,7 +72,8 @@ CoglPipeline * _st_create_texture_pipeli
 CoglPipeline * _st_create_shadow_pipeline (StShadow    *shadow_spec,
                                            CoglTexture *src_texture);
 CoglPipeline * _st_create_shadow_pipeline_from_actor (StShadow     *shadow_spec,
-                                                      ClutterActor *actor);
+                                                      ClutterActor *actor,
+                                                      StPrivateShadowCreateFlags flags);
 cairo_pattern_t *_st_create_shadow_cairo_pattern (StShadow        *shadow_spec,
                                                   cairo_pattern_t *src_pattern);
 
--- gnome-shell-3.26.1.orig/src/st/st-shadow.c
+++ gnome-shell-3.26.1/src/st/st-shadow.c
@@ -231,7 +231,9 @@ st_shadow_helper_update (StShadowHelper
       if (helper->pipeline)
         cogl_object_unref (helper->pipeline);
 
-      helper->pipeline = _st_create_shadow_pipeline_from_actor (helper->shadow, source);
+      helper->pipeline = _st_create_shadow_pipeline_from_actor (helper->shadow,
+                                                                source,
+                                                                ST_SHADOW_ANY_MODE);
       helper->width = width;
       helper->height = height;
     }
